#!/bin/sh

#! fix docker login, try nixos-unstable?

FZF_IMAGES_CLIENT="docker"
FZF_IMAGES_TAGS_REGISTRY_DIR=/tmp/.fzf_images_cache
FZF_IMAGES_ENTRIES=("localhost")

AWS_REGION="us-east-1" # ! set with tmux setenv outside of the script

# $1 env value
_fzf_tmux_layout_setenv(){
  tmux setenv FZF_IMAGES_LAYOUT $1 && export $(tmux showenv | grep "^FZF_IMAGES_LAYOUT")
}

# Define the layout and location of the execution in tmux based on $1
_fzf_tmux_action_layout(){
  TMUX_LAYOUT=$(tmux showenv | grep "^FZF_IMAGES_LAYOUT" | awk -F '=' '{print $2}')
  COMMAND="sh ~/code/fzf_images/fzf_images"
  tmux setenv -u FZF_IMAGES_LAYOUT
  case $TMUX_LAYOUT in
    "")
      $1 ;;
      # tmux send-keys -t right "sh fzf_images $1" Enter ;;
    "window")
      tmux neww zsh -c "$COMMAND $1 $2" ;;
    "split")
      tmux new-window && tmux split-window -h && \
        tmux setw synchronize-panes on && \
        tmux send-keys "clear_screen 2>/dev/null && $COMMAND $1 $2"  Enter ;;
  esac
}

_fzf_images_menu(){ 
  REGISTRIES=$(_fzf_images_get_registry)
  FZF_IMAGES_ENTRIES=("${FZF_IMAGES_ENTRIES[@]}" "${REGISTRIES[@]}")
  _fzf_images_entry_selection \
    $(printf "%s\n" "${FZF_IMAGES_ENTRIES[@]}" | \
      fzf-tmux -p \
      --bind 'ctrl-o:execute(sh fzf_images _fzf_tmux_layout_setenv "window")+accept' \
      --bind 'ctrl-v:execute-multi(sh fzf_images _fzf_tmux_layout_setenv "split")+accept')
}

_fzf_images_entry_selection(){ 
  if [ ! -z "$1" ]; then 
    case $1 in
      "localhost")
        _fzf_tmux_action_layout _fzf_images_fzf_local ;;
      *)
        _fzf_tmux_action_layout _fzf_images_fzf_registry $1 ;;
    esac
  fi
}

#####################
### ENTRIES
#####################

_fzf_images_fzf_registry(){
  tmux setenv FZF_IMAGES_REGISTRY $1
  _fzf_images_tags_registry $1 | fzf \
    --multi \
    --header-lines=1 \
      --bind 'enter:execute-silent(sh fzf_images _fzf_images_action_run /{1}:{2})+abort' \
      --bind 'ctrl-p:execute-multi(sh fzf_images _fzf_images_action_pull {1},{2})+abort' \
      --bind 'ctrl-t:execute-multi(sh fzf_images _fzf_images_action_trivy {1},{2})+abort'
  tmux setenv -u FZF_IMAGES_REGISTRY
}

# --header $'ctrl-d:rm | ctrl-p:push | ctrl-t:trivy\n' \
_fzf_images_fzf_local(){
  $FZF_IMAGES_CLIENT images | fzf \
    --multi \
    --header-lines=1 \
    --prompt "$(awk -F '_' '{print $1}' <<< $AWS_PROFILE)> " \
      --bind 'ctrl-h:toggle-preview' \
      --bind 'enter:execute-silent(sh fzf_images _fzf_images_action_run {3})+abort' \
      --bind 'ctrl-d:execute-multi(sh fzf_images _fzf_images_action_rm {3})+abort' \
      --bind 'ctrl-p:execute-multi(sh fzf_images _fzf_images_action_push {1},{2})+abort' \
      --bind 'ctrl-t:execute-multi(sh fzf_images _fzf_images_action_trivy {1},{2})+abort' \
    --preview-window right,hidden,60% \
    --preview 'sh fzf_images _fzf_images_preview_inspect {3} | bat --plain -l json'
}

#####################
### ACTION
#####################
# ! pull action

_fzf_images_action_pull(){
  IMAGES=($(awk -F ',' '{print $1}' <<< $@))
  TAGS=($(awk -F ',' '{print $2}' <<< $@))

  # ?works in sh not zsh
  for (( i = 0; $i<${#IMAGES[@]}; i++ )); do
    PULLING="${IMAGES[i]}":"${TAGS[i]}"
    echo -e "\nPulling: $PULLING\n"
    $FZF_IMAGES_CLIENT pull $PULLING
  done
  echo -e "\ndone!" && sleep 2s
}

# ! add confirmation
_fzf_images_action_rm(){
  $FZF_IMAGES_CLIENT image rm $@ --force
}

# ! tmux send-keys show output of what was pushed
_fzf_images_action_push(){
  IMAGES=($(awk -F ',' '{print $1}' <<< $@))
  TAGS=($(awk -F ',' '{print $2}' <<< $@))

  # ?works in sh not zsh
  for (( i = 0; $i<${#IMAGES[@]}; i++ )); do
PUSHING="${IMAGES[i]}":"${TAGS[i]}"
    echo -e "\nPushing: $PUSHING\n"
    $FZF_IMAGES_CLIENT push $PUSHING
  done
  echo -e "\ndone!" && sleep 2s
}

_fzf_images_action_trivy(){
  DIR=trivy-$(awk -F '_' '{print $1}' <<< $AWS_PROFILE)-$(date '+%m%d%Y%H%M%S')
  IMAGES=($(awk -F ',' '{print $1}' <<< $@))
  TAGS=($(awk -F ',' '{print $2}' <<< $@))

  mkdir $DIR && trivy --version > $DIR/_version.txt
  for (( i = 0; $i<${#IMAGES[@]}; i++ )); do
    SCANNING="${IMAGES[i]}":"${TAGS[i]}"
    echo -e "\nScanning: $SCANNING\n"
    trivy image $SCANNING | tee $DIR/${SCANNING##*/}.txt
  done
}

_fzf_images_action_run(){
  export $(tmux showenv | grep '^FZF_IMAGES_REGISTRY')
  PORT=$(tmux showenv | grep '^FZF_IMAGES_PORT' | awk -F '=' '{print $2}')
  if [[ -z "$PORT" ]]; then
    COMMAND="run -ti --rm"
  else
    COMMAND="run -ti --rm -p $PORT:$PORT"
  fi
  tmux send-keys "$FZF_IMAGES_CLIENT $COMMAND $FZF_IMAGES_REGISTRY$1" Enter
  tmux setenv -u FZF_IMAGES_PORT
}

#####################
### PREVIEW
#####################

# ! tee save multiple values to array
_fzf_images_preview_inspect(){
  FZF_IMAGES_PREVIEW_LOCAL=$($FZF_IMAGES_CLIENT inspect $1)
  { PORT=$( echo "$FZF_IMAGES_PREVIEW_LOCAL" | tee /dev/fd/3 | \
    jq -r '.[].Config.ExposedPorts | keys[]' | \
    awk -F "/" '{print $1}'); \
  } 3>&1
  tmux setenv FZF_IMAGES_PORT $PORT
}

#####################
### HELPERS
#####################

# note: doesn't show untagged images because no [] sending error to /dev/null
# ! show size in MB
# ! split PUSHED by date/time
# ! sort based on date/time in descending order
_fzf_images_tags_registry(){
  if [[ ! -z "$1" ]]; then _fzf_images_auth_registry $1; fi
  mkdir -p $FZF_IMAGES_TAGS_REGISTRY_DIR
  FZF_IMAGES_TAGS_REGISTRY_FILE=$FZF_IMAGES_TAGS_REGISTRY_DIR/$1

  if [[ -f "$FZF_IMAGES_TAGS_REGISTRY_FILE" ]]; then
    cat $FZF_IMAGES_TAGS_REGISTRY_FILE
  else
    FZF_IMAGES_REGISTRY_REPOS=$(aws ecr describe-repositories --region $AWS_REGION | \
      jq -r ".repositories[].repositoryName")
    for repo in ${FZF_IMAGES_REGISTRY_REPOS[@]} ; do
      FZF_IMAGES_REGISTRY_IMAGES+="$(aws ecr describe-images --repository-name $repo --region $AWS_REGION | \
        jq -r '.imageDetails[] | "\(.repositoryName) \(.imageTags[]) \(.imagePushedAt) \(.imageSizeInBytes)"' 2>/dev/null)\n"
    done
    echo -e "$FZF_IMAGES_REGISTRY_IMAGES" | \
      sort | sed '1i REPOSITORY TAG PUSHED SIZE' | column -t | \
      tee $FZF_IMAGES_TAGS_REGISTRY_FILE
  fi
}

_fzf_images_get_registry(){
  if [[ $FZF_IMAGES_CLIENT == "podman" ]]; then
    AUTH_FILE=~/.config/containers/auth.json
  elif [[ $FZF_IMAGES_CLIENT == "docker" ]]; then
    AUTH_FILE=~/.docker/config.json
  fi
  cat $AUTH_FILE | jq -r '.credHelpers | keys[]'
}

# note: this assumes that theres a profile defined in .aws/credentials in the format [ACCOUNT_*]
_fzf_images_auth_registry(){
  FZF_IMAGES_REGISTRY_AWS_ACCOUNT=$(echo "$1" | awk -F '.' '{print $1}')
  FZF_IMAGES_REGISTRY_AWS_PROFILE=$(cat ~/.aws/credentials | \
    grep -o -P "(?<=\[)$FZF_IMAGES_REGISTRY_AWS_ACCOUNT.*(?=\])")
  AWS_PROFILE=$FZF_IMAGES_REGISTRY_AWS_PROFILE
}

$@
